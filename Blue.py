# ART project
from random import randint
import random 
import math
import turtle
target = [[97, 119], [80, 163], [19, 239], [-57, 249], [-49, 290], [-56, 292], [-65, 252], [-132, 228],
     [-153, 157], [-151, 89], [-136, -38], [-60, -118], [64, -40], [27, 7], [75, 62], [71, 100],
     [48, 103], [28, 102], [10, 110], [-10, 110], [-40, 93], [-28, 88], [-7, 98], [11, 98], [37, 94],
     [22, 89], [19, 97], [-5, 100], [-5, 87], [6, 94], [20, 89], [-1, 85], [-24, 88], [-15, 70],
     [22, 75], [35, 91], [69, 122], [-30, 131], [-57, 99], [-62, 23], [-32, 22], [-26, 5], [-34, -5],
     [-44, -3], [-53, 5], [-74, -7], [-57, -25], [-2, -23], [2, -32], [-28, -43], [-44, -54],
     [-79, -54], [-84, -40], [-94, -32], [-57, -38], [-4, -33], [-16, -27], [-81, -27], [-70, -13],
     [-88, 6], [-79, 38], [-75, 90], [-95, 120], [-127, 115], [-143, 100], [-136, 90], [-119, 105],
     [-96, 105], [-85, 93], [-84, 88], [-90, 93], [-113, 98], [-128, 88], [-110, 81], [-113, 93],
     [-92, 91], [-90, 88], [-99, 92], [-109, 92], [-107, 84], [-86, 87], [-91, 78], [-116, 72],
     [-138, 83], [-151, 92], [-164, 186], [-134, 253], [-45, 308], [54, 307], [126, 264], [187, 142],
     [207, -9], [222, -155], [111, -325], [108, -170], [114, 24], [99, 118], [70, -135], [2, -160],
     [-56, -118], [-46, -169], [-118, -228], [-139, -307], [-204, -258], [-188, -158], [-212, -59],
     [-215, 52], [-198, 77], [-195, 145], [-162, 194]]
def generate(p, points, count, target):
    #pp = [[0,-12],[4,-6],[5,-5],[6,-5],[7,-6],[8,-8],[9,-6],[10,-5],[11,-5],[12,-6],[13,-8],[13,-9],[12,-11],[11,-12],[14,-11],[17,-9],[19,-7],[20,-5],[21,-2],[21,1],[20,4],[19,6],[17,8],[14,10],[11,11],[12,10],[13,8],[13,7],[12,5],[11,4],[9,3],[6,3],[3,4],[3,12],[1,9],[-1, 9],[-3,12],[-3,4],[-6,3],[-9,3],[-11,4],[-12,5],[-13,7],[-13,8],[-12,10],[-11,11],[-14,10],[-17,8],[-19,6],[-20,4],[-21,1],[-21,-2],[-20,-5],[-19,-7],[-17,-9],[-14,-11],[-11,-12],[-12,-11],[-13,-9],[-13,-8],[-12,-6],[-11,-5],[-10,-5],[-9,-6],[-8,-8],[-7,-6],[-6,-5],[-5,-5],[-4,-6],[0,-12]]
    pp = target
    for i in range(count): 
        shuf = random.sample(pp, len(pp))
        points.append(shuf)
        
def fitness(points, target, score, d, sk, w):
    for i in points:
        for a in i:
            s = target[i.index(a)]
            if a == s:
                score += 2000
                #sk += 1
            elif a != s:
                score -= 1
                #score += sk*4
                #sk = 0
            else:
                print('what?')
        d.append(abs(score**4))
        score = 0
    w = max(d)
    #print((w**(0.25))*100*((105*2000)**(-1))//1)
    #print(d)


        
def pick2(d, points):
    global rec, rec2
    som = 0
    for i in d:
        som += i
    q = 0
    for i in d:
        d[q] = i*(som**(-1))
        q += 1

        
    r = (randint(0,100))*0.01
    ind = 0 
    while r > 0 and ind < len(d):
        r -= d[ind]
        ind += 1
    ind -= 1
    rec = ind
    ind = 0
    r2 = (randint(0,100))*0.01
    ind2 = 0
    
    while r2 > 0 and ind2 < len(d):
        r2 -= d[ind2]
        ind2 += 1
    ind2 -= 1
    rec2 = ind2
    ind2 = 0

    
'''def pick(d, points, w_r):
    global rec, rec2
    rec = 1000000000000000000000000000
    rec2 = 0
    for i in d:
        if i < rec: 
            rec2 = rec
            rec = i
            w_r = d.index(i)
            sk = 0
        elif i == rec:
            rec2 = i
        elif i < rec and i > rec2:
            rec2 = i
        else:
            pass'''
'''def mutate(d, points, p, w_r, count, n):
    global rec, rec2
    pick(d, points, w_r)
    m = -2
    for i in range(7):
        m += 2
        l1 = points[m]     # accurate list
        l2 = points[m+1]    # second  list
        numa = randint(0, len(l1)//4)
        numb = randint(len(l1)//2, len(l1))
        x = l1[numa:numb]
        bnew = []
        bbb = []
        v = bbb + l2
        for i in v:
            ass = v.index(i)
            for a in x:
                if a == i:
                    del x[x.index(a)]
                else:
                    pass
        qaz = v + x
        bnew.append(v+x)
        prob = randint(0, 4)
        if prob == 0:
            A1 = randint(0, len(bnew[0])//2)
            B1 = randint((len(bnew[0])//2)+1, len(bnew[0])-1)
            bnew[0][A1], bnew[0][B1] = bnew[0][B1], bnew[0][A1]
        elif prob == 1:
            A1 = randint(0, len(bnew[0])-1)
            B1 = randint(0, len(bnew[0])-1)
            bnew[0][A1], bnew[0][B1] = bnew[0][B1], bnew[0][A1]
        elif prob == 12:
            A1 = randint(1, len(points[i_rec2])-1)
            B1 = A1-1
            points[i_rec2][A1], points[i_rec2][B1] = points[i_rec2][B1], points[i_rec2][A1]
        elif prob == 4:
            pass
        else:
            pass
        points.append(bnew[0])
        bnew = []
        part = []
        #del points[d.index(max(d))] 
    if n < 1000000000 :
        for i in range(4):
            del points[d.index(max(d))]
    else:
        pass

'''
def mutate(d, points, p, w_r, target):
    global rec, rec2
    #pick(d, points, w_r)
    pick2(d, points)
    #i_rec = d.index(rec)   # most accurate
    #i_rec2 = d.index(rec2) # second
    l1 = points[rec]     # accurate list
    l2 = points[rec2]    # second  list
    numa = randint(0, len(l1)-1)
    numb = randint(numa, len(l1))
    x = l1[numa:numb]
    e = []
    r = e+x
    y = e+target
    for i in r:
        for a in y:
            if a == i:
                del y[y.index(a)]
                break
            else:
                pass
    x += y
    prob = randint(0, 3)
    if prob == 0:
        for i in range(5):
            a = randint(0, len(x)-1)
            b = randint(0, len(x)-1)
            x[a], x[b] = x[b], x[a]
    else:
        pass
    points.append(x)
    del points[d.index(min(d))]

def draw(t, points, w_r):
    t.clear()
    t.bgcolor('black')
    q = 1
    t.penup()
    t.speed(0)
    for i in points[w_r]:
        t.pencolor('blue')
        t.goto(i[0]*q, i[1]*q)
        t.pendown()
    t.bgcolor('black')



def find():
    points = []
    #target = [[0,-12],[4,-6],[5,-5],[6,-5],[7,-6],[8,-8],[9,-6],[10,-5],[11,-5],[12,-6],[13,-8],[13,-9],[12,-11],[11,-12],[14,-11],[17,-9],[19,-7],[20,-5],[21,-2],[21,1],[20,4],[19,6],[17,8],[14,10],[11,11],[12,10],[13,8],[13,7],[12,5],[11,4],[9,3],[6,3],[3,4],[3,12],[1,9],[-1, 9],[-3,12],[-3,4],[-6,3],[-9,3],[-11,4],[-12,5],[-13,7],[-13,8],[-12,10],[-11,11],[-14,10],[-17,8],[-19,6],[-20,4],[-21,1],[-21,-2],[-20,-5],[-19,-7],[-17,-9],[-14,-11],[-11,-12],[-12,-11],[-13,-9],[-13,-8],[-12,-6],[-11,-5],[-10,-5],[-9,-6],[-8,-8],[-7,-6],[-6,-5],[-5,-5],[-4,-6],[0,-12]]
    target = [[97, 119], [80, 163], [19, 239], [-57, 249], [-49, 290], [-56, 292], [-65, 252], [-132, 228],[-153, 157], [-151, 89], [-136, -38], [-60, -118], [64, -40], [27, 7], [75, 62], [71, 100],[48, 103], [28, 102], [10, 110], [-10, 110], [-40, 93], [-28, 88], [-7, 98], [11, 98], [37, 94],[22, 89], [19, 97], [-5, 100], [-5, 87], [6, 94], [20, 89], [-1, 85], [-24, 88], [-15, 70],[22, 75], [35, 91], [69, 122], [-30, 131], [-57, 99], [-62, 23], [-32, 22], [-26, 5], [-34, -5],[-44, -3], [-53, 5], [-74, -7], [-57, -25], [-2, -23], [2, -32], [-28, -43], [-44, -54],[-79, -54], [-84, -40], [-94, -32], [-57, -38], [-4, -33], [-16, -27], [-81, -27], [-70, -13],[-88, 6], [-79, 38], [-75, 90], [-95, 120], [-127, 115], [-143, 100], [-136, 90], [-119, 105],[-96, 105], [-85, 93], [-84, 88], [-90, 93], [-113, 98], [-128, 88], [-110, 81], [-113, 93],[-92, 91], [-90, 88], [-99, 92], [-109, 92], [-107, 84], [-86, 87], [-91, 78], [-116, 72],[-138, 83], [-151, 92], [-164, 186], [-134, 253], [-45, 308], [54, 307], [126, 264], [187, 142],[207, -9], [222, -155], [111, -325], [108, -170], [114, 24], [99, 118], [70, -135], [2, -160],[-56, -118], [-46, -169], [-118, -228], [-139, -307], [-204, -258], [-188, -158], [-212, -59],[-215, 52], [-198, 77], [-195, 145], [-162, 194]]
    score = 0
    sk = 0
    d = []
    p = len(target) # points
    count = 8
    generate(p, points, count, target)
    t = turtle
    w_r = 0
    n = 5000001
    gen = 0
    w = 0
    while n > 0:
        t.hideturtle()
        n -= 1
        fitness(points, target, score, d, sk, w)
        mutate(d, points, p, w_r, target) #count, n ) #last 2
        #d = []
        if n%1 == 0:
            draw(t, points, w_r)
            print(gen)
            gen += 1
            d = []
        else:
            d = []
            gen += 1
            pass
    print(points[w_r])
find()

